import { RootController } from '../controller/root';
import { InputBindingPlugin } from '../plugin/input-binding';
import { MonitorBindingPlugin } from '../plugin/monitor-binding';
import { ButtonApi } from './button';
import { ComponentApi } from './component-api';
import { FolderApi } from './folder';
import { InputBindingApi } from './input-binding';
import * as InputBindingControllers from './input-binding-controllers';
import { MonitorBindingApi } from './monitor-binding';
import { PresetObject } from './preset';
import { SeparatorApi } from './separator';
import { ButtonParams, FolderParams, InputParams, MonitorParams, SeparatorParams } from './types';
interface RootApiEventHandlers {
    change: (value: unknown) => void;
    fold: (expanded: boolean) => void;
    update: (value: unknown) => void;
}
declare type PluginRegistration<In, Ex> = {
    type: 'input';
    plugin: InputBindingPlugin<In, Ex>;
} | {
    type: 'monitor';
    plugin: MonitorBindingPlugin<In, Ex>;
};
/**
 * The Tweakpane interface.
 *
 * ```
 * new Tweakpane(options: TweakpaneConfig): RootApi
 * ```
 *
 * See [[`TweakpaneConfig`]] interface for available options.
 */
export declare class RootApi implements ComponentApi {
    /**
     * @hidden
     */
    readonly controller: RootController;
    /**
     * @hidden
     */
    static registerPlugin<In, Ex>(r: PluginRegistration<In, Ex>): void;
    /**
     * @hidden
     */
    constructor(rootController: RootController);
    get element(): HTMLElement;
    get expanded(): boolean;
    set expanded(expanded: boolean);
    get hidden(): boolean;
    set hidden(hidden: boolean);
    dispose(): void;
    addInput(object: object, key: string, opt_params?: InputParams): InputBindingApi<InputBindingControllers.InputIn, InputBindingControllers.InputEx>;
    addMonitor(object: object, key: string, opt_params?: MonitorParams): MonitorBindingApi<string | number | boolean>;
    addButton(params: ButtonParams): ButtonApi;
    addFolder(params: FolderParams): FolderApi;
    addSeparator(opt_params?: SeparatorParams): SeparatorApi;
    /**
     * Import a preset of all inputs.
     * @param preset The preset object to import.
     */
    importPreset(preset: PresetObject): void;
    /**
     * Export a preset of all inputs.
     * @return The exported preset object.
     */
    exportPreset(): PresetObject;
    /**
     * Adds a global event listener. It handles all events of child inputs/monitors.
     * @param eventName The event name to listen.
     * @return The API object itself.
     */
    on<EventName extends keyof RootApiEventHandlers>(eventName: EventName, handler: RootApiEventHandlers[EventName]): RootApi;
    /**
     * Refreshes all bindings of the pane.
     */
    refresh(): void;
}
export {};
