import { FolderController } from '../controller/folder';
import { ButtonApi } from './button';
import { ComponentApi } from './component-api';
import { InputBindingApi } from './input-binding';
import * as InputBindingControllers from './input-binding-controllers';
import { MonitorBindingApi } from './monitor-binding';
import { SeparatorApi } from './separator';
import { ButtonParams, FolderParams, InputParams, MonitorParams, SeparatorParams } from './types';
interface FolderApiEventHandlers {
    change: (value: unknown) => void;
    fold: (expanded: boolean) => void;
    update: (value: unknown) => void;
}
export declare class FolderApi implements ComponentApi {
    /**
     * @hidden
     */
    readonly controller: FolderController;
    /**
     * @hidden
     */
    constructor(folderController: FolderController);
    get expanded(): boolean;
    set expanded(expanded: boolean);
    get hidden(): boolean;
    set hidden(hidden: boolean);
    dispose(): void;
    addInput(object: object, key: string, opt_params?: InputParams): InputBindingApi<InputBindingControllers.InputIn, InputBindingControllers.InputEx>;
    addMonitor(object: object, key: string, opt_params?: MonitorParams): MonitorBindingApi<string | number | boolean>;
    addFolder(params: FolderParams): FolderApi;
    addButton(params: ButtonParams): ButtonApi;
    addSeparator(opt_params?: SeparatorParams): SeparatorApi;
    on<EventName extends keyof FolderApiEventHandlers>(eventName: EventName, handler: FolderApiEventHandlers[EventName]): FolderApi;
}
export {};
