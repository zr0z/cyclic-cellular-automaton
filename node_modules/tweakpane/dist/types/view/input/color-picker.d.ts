import { Color } from '../../model/color';
import { Foldable } from '../../model/foldable';
import { InputValue } from '../../model/input-value';
import { PickedColor } from '../../model/picked-color';
import { View, ViewConfig } from '../view';
import { APaletteInputView } from './a-palette';
import { ColorComponentTextsInputView } from './color-component-texts';
import { HPaletteInputView } from './h-palette';
import { InputView } from './input';
import { SvPaletteInputView } from './sv-palette';
import { TextInputView } from './text';
interface Config extends ViewConfig {
    alphaInputViews: {
        palette: APaletteInputView;
        text: TextInputView<number>;
    } | null;
    componentTextsView: ColorComponentTextsInputView;
    foldable: Foldable;
    hPaletteInputView: HPaletteInputView;
    pickedColor: PickedColor;
    supportsAlpha: boolean;
    svPaletteInputView: SvPaletteInputView;
}
/**
 * @hidden
 */
export declare class ColorPickerInputView extends View implements InputView<Color> {
    readonly foldable: Foldable;
    readonly pickedColor: PickedColor;
    private alphaViews_;
    private hPaletteView_;
    private compTextsView_;
    private svPaletteView_;
    constructor(document: Document, config: Config);
    get allFocusableElements(): HTMLElement[];
    get value(): InputValue<Color>;
    update(): void;
    private onValueChange_;
    private onFoldableChange_;
}
export {};
