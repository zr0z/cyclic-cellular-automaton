import { Constraint } from '../constraint/constraint';
import { Emitter, EventTypeMap } from '../misc/emitter';
/**
 * @hidden
 */
export interface InputValueEvents<In> extends EventTypeMap {
    change: {
        sender: InputValue<In>;
        rawValue: In;
    };
}
/**
 * @hidden
 */
export declare class InputValue<T> {
    readonly emitter: Emitter<InputValueEvents<T>>;
    private constraint_;
    private equals_;
    private rawValue_;
    constructor(initialValue: T, constraint?: Constraint<T>, equals?: (v1: T, v2: T) => boolean);
    get constraint(): Constraint<T> | undefined;
    get rawValue(): T;
    set rawValue(rawValue: T);
}
