import { UiController, UiInputBinding, UiMonitorBinding } from '../controller/ui';
import { Emitter, EventTypeMap } from '../misc/emitter';
/**
 * @hidden
 */
export interface UiContainerEvents extends EventTypeMap {
    add: {
        index: number;
        uiController: UiController;
        sender: UiContainer;
    };
    remove: {
        sender: UiContainer;
    };
    inputchange: {
        inputBinding: UiInputBinding;
        sender: UiContainer;
        value: unknown;
    };
    itemfold: {
        expanded: boolean;
        sender: UiContainer;
    };
    itemlayout: {
        sender: UiContainer;
    };
    monitorupdate: {
        monitorBinding: UiMonitorBinding;
        sender: UiContainer;
        value: unknown;
    };
}
/**
 * @hidden
 */
export declare class UiContainer {
    readonly emitter: Emitter<UiContainerEvents>;
    private ucList_;
    constructor();
    get items(): UiController[];
    add(uc: UiController, opt_index?: number): void;
    private onListAdd_;
    private onListRemove_;
    private onListItemLayout_;
    private onListItemDispose_;
    private onItemInputChange_;
    private onItemMonitorUpdate_;
    private onItemFolderFold_;
    private onSubitemLayout_;
    private onSubitemInputChange_;
    private onSubitemMonitorUpdate_;
    private onSubitemFolderFold_;
}
