import { Emitter, EventTypeMap } from '../misc/emitter';
import { Ticker } from '../misc/ticker/ticker';
import { MonitorValue } from '../model/monitor-value';
import { Target } from '../model/target';
interface Config<In> {
    reader: (outerValue: unknown) => In;
    target: Target;
    ticker: Ticker;
    value: MonitorValue<In>;
}
/**
 * @hidden
 */
export interface MonitorBindingEvents<In> extends EventTypeMap {
    update: {
        rawValue: In;
        sender: MonitorBinding<In>;
    };
}
/**
 * @hidden
 */
export declare class MonitorBinding<In> {
    readonly emitter: Emitter<MonitorBindingEvents<In>>;
    readonly target: Target;
    readonly ticker: Ticker;
    readonly value: MonitorValue<In>;
    private reader_;
    constructor(config: Config<In>);
    dispose(): void;
    read(): void;
    private onTick_;
    private onValueUpdate_;
}
export {};
