import { Emitter, EventTypeMap } from '../misc/emitter';
import { InputValue } from '../model/input-value';
import { Target } from '../model/target';
interface Config<In, Ex> {
    reader: (outerValue: unknown) => In;
    target: Target;
    value: InputValue<In>;
    writer: (innerValue: In) => Ex;
}
/**
 * @hidden
 */
export interface InputBindingEvents<In, Ex> extends EventTypeMap {
    change: {
        rawValue: In;
        sender: InputBinding<In, Ex>;
    };
}
/**
 * @hidden
 */
export declare class InputBinding<In, Ex> {
    readonly emitter: Emitter<InputBindingEvents<In, Ex>>;
    readonly target: Target;
    readonly value: InputValue<In>;
    readonly reader: (outerValue: unknown) => In;
    readonly writer: (innerValue: In) => Ex;
    constructor(config: Config<In, Ex>);
    read(): void;
    getValueToWrite(rawValue: In): Ex;
    write_(rawValue: In): void;
    private onValueChange_;
}
export {};
