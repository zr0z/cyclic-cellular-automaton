import { MonitorParams } from '../api/types';
import { MonitorBinding } from '../binding/monitor';
import { MonitorBindingController } from '../controller/monitor-binding';
import { MonitorController } from '../controller/monitor/monitor';
import { Target } from '../model/target';
interface ValueArguments<Ex> {
    initialValue: Ex;
    params: MonitorParams;
    target: Target;
}
interface ControllerArguments<In> {
    binding: MonitorBinding<In>;
    document: Document;
    params: MonitorParams;
}
export interface MonitorBindingPlugin<In, Ex> {
    model: {
        accept: (value: unknown, params: MonitorParams) => Ex | null;
        reader: (args: ValueArguments<Ex>) => (value: Ex) => In;
        defaultBufferSize: (params: MonitorParams) => number;
    };
    controller: (args: ControllerArguments<In>) => MonitorController<In>;
}
export declare function createController<In, Ex>(plugin: MonitorBindingPlugin<In, Ex>, args: {
    document: Document;
    params: MonitorParams;
    target: Target;
}): MonitorBindingController<In> | null;
export {};
