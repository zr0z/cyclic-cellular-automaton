import { InputParams } from '../api/types';
import { InputBinding } from '../binding/input';
import { Constraint } from '../constraint/constraint';
import { InputBindingController } from '../controller/input-binding';
import { InputController } from '../controller/input/input';
import { Target } from '../model/target';
interface ValueArgs<Ex> {
    initialValue: Ex;
    params: InputParams;
    target: Target;
}
interface ControllerArgs<In, Ex> {
    binding: InputBinding<In, Ex>;
    initialValue: Ex;
    params: InputParams;
    document: Document;
}
export interface InputBindingPlugin<In, Ex> {
    model: {
        accept: (value: unknown, params: InputParams) => Ex | null;
        reader: (args: ValueArgs<Ex>) => (value: Ex) => In;
        constraint?: (args: ValueArgs<Ex>) => Constraint<In>;
        equals?: (v1: In, v2: In) => boolean;
        writer: (args: ValueArgs<Ex>) => (value: In) => Ex;
    };
    controller: (args: ControllerArgs<In, Ex>) => InputController<In>;
}
export declare function createController<In, Ex>(plugin: InputBindingPlugin<In, Ex>, args: {
    document: Document;
    params: InputParams;
    target: Target;
}): InputBindingController<In, Ex> | null;
export {};
