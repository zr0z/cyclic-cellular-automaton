declare type Handler<E> = (ev: E) => void;
interface EventObject {
    sender: unknown;
    [key: string]: any;
}
/**
 * @hidden
 */
export interface EventTypeMap {
    [key: string]: EventObject;
}
/**
 * @hidden
 */
export declare class Emitter<E extends EventTypeMap> {
    readonly typeMap: E;
    private observers_;
    constructor();
    on<EventName extends keyof E>(eventName: EventName, handler: Handler<E[EventName]>): Emitter<E>;
    off<EventName extends keyof E>(eventName: EventName, handler: Handler<E[EventName]>): Emitter<E>;
    emit<EventName extends keyof E>(eventName: EventName, event: E[EventName]): void;
}
export {};
