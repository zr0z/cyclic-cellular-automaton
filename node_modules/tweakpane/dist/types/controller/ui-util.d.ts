import { InputParamsOption, InputParamsOptionDictionary } from '../api/types';
import { Constraint } from '../constraint/constraint';
import { Class } from '../misc/type-util';
import { Point2d } from '../model/point-2d';
import { UiController } from './ui';
/**
 * @hidden
 */
export declare function normalizeInputParamsOptions<T1, T2>(options: InputParamsOption<T1>[] | InputParamsOptionDictionary<T1>, convert: (value: T1) => T2): InputParamsOption<T2>[];
/**
 * @hidden
 */
export declare function findControllers<Controller>(uiControllers: UiController[], controllerClass: Class<Controller>): Controller[];
/**
 * @hidden
 */
export declare function getStepForTextInput(constraint: Constraint<number> | undefined): number;
interface StepKeys {
    altKey: boolean;
    downKey: boolean;
    shiftKey: boolean;
    upKey: boolean;
}
/**
 * @hidden
 */
export declare function getStepForKey(baseStep: number, keys: StepKeys): number;
/**
 * @hidden
 */
export declare function getVerticalStepKeys(ev: KeyboardEvent): StepKeys;
/**
 * @hidden
 */
export declare function getHorizontalStepKeys(ev: KeyboardEvent): StepKeys;
/**
 * @hidden
 */
export declare function isVerticalArrowKey(keyCode: number): boolean;
/**
 * @hidden
 */
export declare function isArrowKey(keyCode: number): boolean;
/**
 * @hidden
 */
export declare function getSuitableDecimalDigits(constraint: Constraint<number> | undefined, rawValue: number): number;
/**
 * @hidden
 */
export declare function getSuitableMaxValueForPoint2dPad(constraint: Constraint<Point2d> | undefined, rawValue: Point2d): number;
/**
 * @hidden
 */
export declare function getBaseStepForColor(forAlpha: boolean): number;
export {};
